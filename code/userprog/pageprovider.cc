#include "pageprovider.h"

#include "bitmap.h"
#include "system.h"

PageProvider::PageProvider()
{
	bitmap = new BitMap(NumPhysPages);
}

/**
 * returns -1 if the allocation can't be done
 */
unsigned PageProvider::GetEmptyPage()
{
	// avoir une autre strategie ??
	//int numPageAvail = bitmap->Find();
	// random method
	int numPageAvail = -1;
	int numClearPages = bitmap->NumClear();
	if (numClearPages != 0) {
		// first version
		/*do {
			numPageAvail = Random() % NumPhysPages;
		} while (bitmap->Test(numPageAvail));*/
		// second version, gets one page in array of disponible pages
		int availablePages[numClearPages];
		for (int i = 0, j = 0; i < NumPhysPages; i++) {
			if (!bitmap->Test(i)) {
				availablePages[j++] = i;
			}
		}
		numPageAvail = availablePages[Random() % numClearPages];
		bitmap->Mark(numPageAvail);
		memset(&(machine->mainMemory[numPageAvail * PageSize]), 0, PageSize);
	}
	return numPageAvail;
}

void PageProvider::ReleasePage(int pageNumber)
{
	bitmap->Clear(pageNumber);
}

unsigned PageProvider::NumAvailPage()
{
	return bitmap->NumClear();
}
