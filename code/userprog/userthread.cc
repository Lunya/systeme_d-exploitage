#include "userthread.h"
#include "thread.h"
#include "system.h"
#include "addrspace.h"
static void StartUserThread(void *schmurtz)
{
	DEBUG('s', "Debut StartUserThread\n");
	//currentThread->space->InitRegisters();
	// Initial program counter -- must be location of "Start"
	//Schmurtz * s = (Schmurtz)schmurtz;
    machine->WriteRegister (PCReg, ((Schmurtz *)schmurtz)->f);
    machine->WriteRegister (4, ((Schmurtz *)schmurtz)->arg);

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    machine->WriteRegister (NextPCReg, machine->ReadRegister(PCReg) + 4);

    // Set the stack register to the end of the address space, where we
    // allocated the stack; but subtract off a bit, to make sure we don't
    // accidentally reference off the end!
    machine->WriteRegister (StackReg, currentThread->space->AllocateUserStack());

	delete schmurtz;
	DEBUG('s', "Fin StartUserThread\n");
	machine->Run();
}

int do_ThreadCreate(int f, int arg)
{
	DEBUG('s', "Debut do_ThreadCreate\n");
	Thread * newThread = new Thread("MyThreadName");
	Schmurtz * schmurtz = new Schmurtz;
	schmurtz->f = f;
	schmurtz->arg = arg;
	newThread->Start(StartUserThread, schmurtz);
	DEBUG('s', "Fin do_ThreadCreate\n");
}

void do_ThreadExit()
{
	currentThread->Finish();
}
