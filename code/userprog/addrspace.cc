// addrspace.cc 
//      Routines to manage address spaces (executing user programs).
//
//      In order to run a user program, you must:
//
//      1. link with the -N -T 0 option 
//      2. run coff2noff to convert the object file to Nachos format
//              (Nachos object code format is essentially just a simpler
//              version of the UNIX executable object code format)
//      3. load the NOFF file into the Nachos file system
//              (if you haven't implemented the file system yet, you
//              don't need to do this last step)
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "addrspace.h"
#include "noff.h"
#include "syscall.h"
#include "new"
#include "synch.h"

static void ReadatVirtual(OpenFile *executable, int virtualaddr, 
    int numBytes, int position, TranslationEntry *pageTable, 
    unsigned numPages)
{
    //Utilisation d'un tampon temporaire que l'on remplit à l'aide de ReadAt
    char * buf = new char[numBytes]; // must Allocate
    executable->ReadAt(buf, numBytes, position);
    //On stocke la table des pages actuelle pour la restaurer plus tard
    TranslationEntry * tmpPageTable = machine->pageTable;
    unsigned tmpNumPages = machine->pageTableSize;
    //On change temporairement de table de pages.
    machine->pageTable = pageTable;
    machine->pageTableSize = numPages;
    //Octet par octet, on recopie dans la mémoire.
    for (int i=0; i<numBytes; i++)
    {
        machine->WriteMem(virtualaddr+i, 1 ,buf[i]);
    }
    //On restaure correctement la table des pages
    machine->pageTable = tmpPageTable;
    machine->pageTableSize = tmpNumPages;
}

//----------------------------------------------------------------------
// SwapHeader
//      Do little endian to big endian conversion on the bytes in the 
//      object file header, in case the file was generated on a little
//      endian machine, and we're now running on a big endian machine.
//----------------------------------------------------------------------

static void
SwapHeader (NoffHeader * noffH)
{
    noffH->noffMagic = WordToHost (noffH->noffMagic);
    noffH->code.size = WordToHost (noffH->code.size);
    noffH->code.virtualAddr = WordToHost (noffH->code.virtualAddr);
    noffH->code.inFileAddr = WordToHost (noffH->code.inFileAddr);
    noffH->initData.size = WordToHost (noffH->initData.size);
    noffH->initData.virtualAddr = WordToHost (noffH->initData.virtualAddr);
    noffH->initData.inFileAddr = WordToHost (noffH->initData.inFileAddr);
    noffH->uninitData.size = WordToHost (noffH->uninitData.size);
    noffH->uninitData.virtualAddr =
	WordToHost (noffH->uninitData.virtualAddr);
    noffH->uninitData.inFileAddr = WordToHost (noffH->uninitData.inFileAddr);
}

//----------------------------------------------------------------------
// AddrSpace::AddrSpace
//      Create an address space to run a user program.
//      Load the program from a file "executable", and set everything
//      up so that we can start executing user instructions.
//
//      Assumes that the object code file is in NOFF format.
//
//      First, set up the translation from program memory to physical 
//      memory.  For now, this is really simple (1:1), since we are
//      only uniprogramming, and we have a single unsegmented page table
//
//      "executable" is the file containing the object code to load into memory
//----------------------------------------------------------------------

AddrSpace::AddrSpace (OpenFile * executable)
{
    //nbThreads = 1;
    // Maybe use a variable for number of maximum simultaneous threads
    bitmap = new BitMap(4); // 256 * 4
    spaceAvail = new Semaphore("space avail", 4);

    // array of threads
    maxThreads = 6;
    threads = (Thread **) malloc(sizeof(Thread*) * maxThreads);

    threadCounter = 1;
    NoffHeader noffH;
    unsigned int i, size;
    DEBUG('s', "Nouvel espace d'adressage. Nombre de processus actuels : %d\n", processCounter);
    processCounter++;
    DEBUG('s', "Incrémentation du nombre de processus : %d\n", processCounter);
    executable->ReadAt (&noffH, sizeof (noffH), 0);
    if ((noffH.noffMagic != NOFFMAGIC) &&
	(WordToHost (noffH.noffMagic) == NOFFMAGIC))
	SwapHeader (&noffH);
    /* Check that this is really a MIPS program */
    ASSERT (noffH.noffMagic == NOFFMAGIC);

// how big is address space?
    size = noffH.code.size + noffH.initData.size + noffH.uninitData.size + UserStacksAreaSize;	// we need to increase the size
    // to leave room for the stack
    numPages = divRoundUp (size, PageSize);
    size = numPages * PageSize;

    // check we're not trying
    // to run anything too big --
    // at least until we have
    // virtual memory
    if (numPages > NumPhysPages)
	    throw std::bad_alloc();

    DEBUG ('a', "Initializing address space, num pages %d, total size 0x%x\n",
	   numPages, size);
// first, set up the translation 
    pageTable = new TranslationEntry[numPages];
    DEBUG('s', "Semaphore pagesSemaphore P (%d)\n", numPages);
    pagesSemaphore->P(numPages);
    for (i = 0; i < numPages; i++)
      {
	  unsigned pageNum = pageprovider->GetEmptyPage();
      ASSERT (pageNum != -1);
      pageTable[i].physicalPage = pageNum;	// for now, phys page # = virtual page #
	  pageTable[i].valid = TRUE;
	  pageTable[i].use = FALSE;
	  pageTable[i].dirty = FALSE;
	  pageTable[i].readOnly = FALSE;	// if the code segment was entirely on 
	  // a separate page, we could set its 
	  // pages to be read-only
      }

// then, copy in the code and data segments into memory
    if (noffH.code.size > 0)
      {
	  DEBUG ('a', "Initializing code segment, at 0x%x, size 0x%x\n",
		 noffH.code.virtualAddr, noffH.code.size);
      /*
	  executable->ReadAt (&(machine->mainMemory[noffH.code.virtualAddr]),
			      noffH.code.size, noffH.code.inFileAddr);
      */
      ReadatVirtual(executable, noffH.code.virtualAddr, noffH.code.size, noffH.code.inFileAddr,
                    pageTable, numPages);
      }
    if (noffH.initData.size > 0)
      {
	  DEBUG ('a', "Initializing data segment, at 0x%x, size 0x%x\n",
		 noffH.initData.virtualAddr, noffH.initData.size);
      /*
	  executable->ReadAt (&
			      (machine->mainMemory
			       [noffH.initData.virtualAddr]),
			      noffH.initData.size, noffH.initData.inFileAddr);
      */
      ReadatVirtual(executable, noffH.initData.virtualAddr, noffH.initData.size, noffH.initData.inFileAddr,
                    pageTable, numPages);
      }

    DEBUG ('a', "Area for stacks at 0x%x, size 0x%x\n",
	   size - UserStacksAreaSize, UserStacksAreaSize);

    pageTable[0].valid = FALSE;			// Catch NULL dereference
}


//----------------------------------------------------------------------
// AddrSpace::~AddrSpace
//      Dealloate an address space.  Nothing for now!
//----------------------------------------------------------------------

AddrSpace::~AddrSpace ()
{
  // LB: Missing [] for delete
  // delete pageTable;
    int i;
  DEBUG('s', "semaphore  pagesSemaphore V\n");
  for (i = 0; i < numPages; i++)
      {
      pageprovider->ReleasePage(pageTable[i].physicalPage);
      pagesSemaphore->V();
      }
  //pagesSemaphore->V(numPages);
    free(threads);
  delete [] pageTable;
  // End of modification
}

//----------------------------------------------------------------------
// AddrSpace::InitRegisters
//      Set the initial values for the user-level register set.
//
//      We write these directly into the "machine" registers, so
//      that we can immediately jump to user code.  Note that these
//      will be saved/restored into the currentThread->userRegisters
//      when this thread is context switched out.
//----------------------------------------------------------------------

void
AddrSpace::InitRegisters ()
{
    int i;

    for (i = 0; i < NumTotalRegs; i++)
	machine->WriteRegister (i, 0);

    // Initial program counter -- must be location of "Start"
    machine->WriteRegister (PCReg, USER_START_ADDRESS);

    // Need to also tell MIPS where next instruction is, because
    // of branch delay possibility
    machine->WriteRegister (NextPCReg, machine->ReadRegister(PCReg) + 4);

    // Set the stack register to the end of the address space, where we
    // allocated the stack; but subtract off a bit, to make sure we don't
    // accidentally reference off the end!
    machine->WriteRegister (StackReg, numPages * PageSize - 16);
    DEBUG ('a', "Initializing stack register to 0x%x\n",
	   numPages * PageSize - 16);
}

//----------------------------------------------------------------------
// AddrSpace::SaveState
//      On a context switch, save any machine state, specific
//      to this address space, that needs saving.
//
//      For now, nothing!
//----------------------------------------------------------------------

void
AddrSpace::SaveState ()
{
}

//----------------------------------------------------------------------
// AddrSpace::RestoreState
//      On a context switch, restore the machine state so that
//      this address space can run.
//
//      For now, tell the machine where to find the page table.
//----------------------------------------------------------------------

void
AddrSpace::RestoreState ()
{
    machine->pageTable = pageTable;
    machine->pageTableSize = numPages;
}

int AddrSpace::AllocateUserStack ()
{
    addThread(currentThread);
    //nbThreads ++;
    unsigned int position = -1;

    spaceAvail->P();
    position = bitmap->Find();
    currentThread->stackPosition = position;
    //DEBUG('s', "Position found : %d \n", position);
    //DEBUG('s', "threadCounter : %d \n", threadCounter);
    //DEBUG('s', "Size: %d\n", numPages * PageSize - 256 * (position));
    return numPages * PageSize - 256 * (position);
}

void AddrSpace::addThread(Thread * t) {
    if (threadCounter == maxThreads) {
        maxThreads *= 2;
        threads = (Thread **) realloc(threads, sizeof(Thread *) * maxThreads);
    }
    threads[threadCounter-1] = t;
    threadCounter ++;
}

void AddrSpace::removeThread(Thread * t) {
    unsigned int i;
    bool found = FALSE;
    for (i = 0; i < threadCounter-1; i++) {
        if (found) {
            threads[i] = threads[i+1];
        } else {
            if (threads[i] == t) {
                found = TRUE;
                threads[i] = threads[i+1];
            }
        }
    }
    threadCounter --;
}

void AddrSpace::finishAllThreads(Thread * t) {
    DEBUG('s', "Début de FINISH ALL THREADS\n");
    unsigned int i, sizeTmp = threadCounter-1;
    for (i = 0; i < sizeTmp; i++) {
        if (threads[i] != t) {
            DEBUG('s', "On est passé ici %d\n", 1);
            if (threads[i]->stackPosition != -1)
            {
                DEBUG('s', "On est passé ici %d\n", 2);
                threads[i]->space->bitmap->Clear(threads[i]->stackPosition);
                DEBUG('s', "On est passé ici %d\n", 3);
                threads[i]->space->spaceAvail->V();
            }
            currentThread = threads[i];
            threadCounter --;
            DEBUG('s', "On est passé ici %s\n", threads[i]->getName());
            threads[i]->Finish();
            DEBUG('s', "On est passé ici %d\n", 5);
            //delete threads[i];
        } else {
            threads[0] = threads[i];
        }
    }
    DEBUG('s', "Fin de FINISH ALL THREADS\n");
}
