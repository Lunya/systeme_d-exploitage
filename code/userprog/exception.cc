// exception.cc 
//      Entry point into the Nachos kernel from user programs.
//      There are two kinds of things that can cause control to
//      transfer back to here from user code:
//
//      syscall -- The user code explicitly requests to call a procedure
//      in the Nachos kernel.  Right now, the only function we support is
//      "Halt".
//
//      exceptions -- The user code does something that the CPU can't handle.
//      For instance, accessing memory that doesn't exist, arithmetic errors,
//      etc.  
//
//      Interrupts (which can also cause control to transfer from user
//      code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"
#include "userthread.h"
#include "synch.h"
//----------------------------------------------------------------------
// UpdatePC : Increments the Program Counter register in order to resume
// the user program immediately after the "syscall" instruction.
//----------------------------------------------------------------------
static void
UpdatePC ()
{
    int pc = machine->ReadRegister (PCReg);
    machine->WriteRegister (PrevPCReg, pc);
    pc = machine->ReadRegister (NextPCReg);
    machine->WriteRegister (PCReg, pc);
    pc += 4;
    machine->WriteRegister (NextPCReg, pc);
}


//----------------------------------------------------------------------
// ExceptionHandler
//      Entry point into the Nachos kernel.  Called when a user program
//      is executing, and either does a syscall, or generates an addressing
//      or arithmetic exception.
//
//      For system calls, the following is the calling convention:
//
//      system call code -- r2
//              arg1 -- r4
//              arg2 -- r5
//              arg3 -- r6
//              arg4 -- r7
//
//      The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//      "which" is the kind of exception.  The list of possible exceptions 
//      are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler (ExceptionType which)
{
    int type = machine->ReadRegister (2);

    switch (which)
      {
	case SyscallException:
          {
	    switch (type)
	      {
		case SC_Halt:
		  {
		    DEBUG ('s', "Shutdown, initiated by user program.\n");
		    interrupt->Halt ();
		    break;
		  }
		case SC_PutChar:
		  {
		    //DEBUG ('s', "PutChar\n");
		    synchconsole->SynchPutChar(machine->ReadRegister (4));
		    //interrupt->Halt ();
		    break;
		  }
		case SC_PutString:
		  {
		  	DEBUG('s', "PutString\n");
		  	char * buf = (char *) malloc(sizeof(char) * MAX_STRING_SIZE);
		  	int sizeCopy;
		  	int machinePointer = machine->ReadRegister(4);
		  	do {
		  		sizeCopy = copyStringFromMachine(machinePointer, buf, MAX_STRING_SIZE);
		  		synchconsole->SynchPutString(buf);
		  		DEBUG('s', "loop %d\n", sizeCopy);
		  		machinePointer += MAX_STRING_SIZE - 1;
		  	} while (sizeCopy == MAX_STRING_SIZE);
		  	free(buf);
		  	break;
		  }
		case SC_GetChar:
		  {
		  	DEBUG('s', "GetChar\n");
		  	machine->WriteRegister(2, synchconsole->SynchGetChar());
		  	break;
	 	  }
	 	case SC_GetString:
	 	  {
	 	  	DEBUG('s', "GetString\n");
	 	  	char *buf = (char*) malloc(sizeof(char) * MAX_STRING_SIZE);
	 	  	synchconsole->SynchGetString(buf, MAX_STRING_SIZE);
	 	  	int machinePointer = 0;
	 	  	machinePointer = copyStringToMachine(buf, machine->ReadRegister(4), machine->ReadRegister(5));
	 	  	machine->WriteRegister(2, machinePointer);
	 	  	free(buf);
	 	  	break;
	 	  }
	 	case SC_PutInt:
		  {
		  	DEBUG('s', "PutInt\n");
		  	int MAX_INT_SIZE = 11; // integer of 32 bits
		  	char * buf = (char *) malloc(sizeof(char) * MAX_INT_SIZE);
		  	int integer = machine->ReadRegister (4);
		  	snprintf(buf, MAX_INT_SIZE, "%d", integer);
		  	synchconsole->SynchPutString(buf);
		  	free(buf);
		  	break;
	 	  }
	 	case SC_GetInt:
		  {
		  	DEBUG('s', "GetInt\n");
		  	char *buf = (char*) malloc(sizeof(char) * MAX_STRING_SIZE);
	 	  	synchconsole->SynchGetString(buf, MAX_STRING_SIZE);
	 	  	int pos = machine->ReadRegister(4);
	 	  	int res = 0;
	 	  	sscanf(buf, "%d", &res);
	 	  	machine->WriteMem(pos, 4, res);
	 	  	free(buf);
	 	  	break;
	 	  }
	 	case SC_ThreadCreate:
	 	  {
	 	  	//DEBUG('s', "ThreadCreate\n");
	 	  	do_ThreadCreate(machine->ReadRegister(4), machine->ReadRegister(5), machine->ReadRegister(6));
	 	  	break;
	 	  }
	 	case SC_ThreadExit:
	 	  {
	 	  	//DEBUG('s', "ThreadExit\n");
	 	  	do_ThreadExit();
	 	  	break;
	 	  }
		case SC_Exit:
		  {
		  	//interrupt->Halt ();
		  	DEBUG('s', "Main Exit\n");
		  	//currentThread->space->finishAllThreads(currentThread);
		  	do_ThreadExit();
		  	break;
		  }
		case SC_SemaphoreCreate:
		  {
		  	DEBUG('s', "Begin SemaphoreCreate\n");
		  	Semaphore * newSemaphore = new Semaphore("", machine->ReadRegister(4));
		  	DEBUG('s', "Semaphore created : %lld \n", (unsigned long int)newSemaphore);
		  	machine->WriteRegister(2, (unsigned long int)newSemaphore);
		  	DEBUG('s', "End SemaphoreCreate\n");
		  	break;
		  }
		case SC_P:
		  {
		  	DEBUG('s', "Begin P with : %lld \n", machine->ReadRegister(4));
		  	((Semaphore *)machine->ReadRegister(4))->P();
		  	DEBUG('s', "End P\n");
		  	break;
		  }
		case SC_V:
		  {
		  	DEBUG('s', "Begin V with %lld \n", machine->ReadRegister(4));
		  	((Semaphore *)machine->ReadRegister(4))->V();
		  	DEBUG('s', "End V\n");
		  	break;
		  }
		case SC_SemaphoreExit:
		  {
		  	DEBUG('s', "Begin SemaphoreExit\n");
		  	DEBUG('s', "Semaphore to delete : %lld \n", machine->ReadRegister(4));
		  	delete ((Semaphore *)machine->ReadRegister(4));
		  	DEBUG('s', "End SemaphoreExit\n");
		  	break;
		  }
		case SC_ForkExec:
		  {
		  	//DEBUG('s', "Begin ForkExec\n");
		  	char * buf = (char *) malloc(sizeof(char) * MAX_STRING_SIZE);
		  	int sizeCopy;
		  	int machinePointer = machine->ReadRegister(4);
		  	char * filename = (char *) malloc(sizeof(char) * MAX_STRING_SIZE);
		  	int iteration = 1;
		  	do {
		  		sizeCopy = copyStringFromMachine(machinePointer, buf, MAX_STRING_SIZE);
		  		machinePointer += MAX_STRING_SIZE - 1;
		  		filename = (char *) realloc(filename, sizeof(char) * MAX_STRING_SIZE * iteration);
		  		for (int i=MAX_STRING_SIZE * (iteration-1); i < MAX_STRING_SIZE * iteration ; i++)
		  		{
		  			filename[i] = buf[i-MAX_STRING_SIZE*(iteration-1)];
		  		}
		  		iteration++;
		  	} while (sizeCopy == MAX_STRING_SIZE);

		  	//Etape 1 : On prend un nom de fichier exécutable
		  	OpenFile *executable = fileSystem->Open (filename);
			AddrSpace *space;
		  	
			if (executable == NULL)
			{
				printf ("Unable to open file %s\n", filename);
				return;
			}
			//Etape 2 : On créer un objet Addrspace à partir de ce fichier exécutable
			space = new AddrSpace (executable);


			//Etape 3 : On crée un thread noyau
			Thread * newThreadNoyau = new Thread("new thread");
			newThreadNoyau->space = space;

			newThreadNoyau->Start(StartKernelThread, NULL);
			//scheduler->ReadyToRun(newThreadNoyau);
			//machine->Run(newThreadNoyau);

		  	//DEBUG('s', "End ForkExec\n");
		  	break;
		  }
		default:
		  {
		  	/*
		  	char * b = (char*) malloc(100);
		  	sprintf(b, "%d", type);
		  	DEBUG('s', b);
		  	free(b);
		    */
		    printf("Unimplemented system call %d\n", type);
		    ASSERT(FALSE);
		  }
	     }

	    // Do not forget to increment the pc before returning!
	    UpdatePC ();
	    break;
	  }

	case PageFaultException:
	  if (!type) {
	    printf("NULL dereference at PC %x!\n", machine->registers[PCReg]);
	    ASSERT (FALSE);
	  } else {
	    printf ("Page Fault at address %x at PC %x\n", type, machine->registers[PCReg]);
	    ASSERT (FALSE);	// For now
	  }

	default:
	  printf ("Unexpected user mode exception %d %d at PC %x\n", which, type, machine->registers[PCReg]);
	  ASSERT (FALSE);
      }
}
