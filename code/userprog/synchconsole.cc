#ifdef CHANGED

#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
#include "synch.h"

static Semaphore *readAvail;
static Semaphore *writeDone;

static Lock * readCharLock;
static Lock * writeCharLock;

static Lock * readStringLock;
static Lock * writeStringLock;

static void ReadAvailHandler(void *arg) { (void) arg; readAvail->V(); }
static void WriteDoneHandler(void *arg) { (void) arg; writeDone->V(); }

SynchConsole::SynchConsole(const char *in, const char *out)
{
	readAvail = new Semaphore("read avail", 0);
	writeDone = new Semaphore("write done", 0);

	readCharLock = new Lock("read char busy");
	writeCharLock = new Lock("write char busy");

	readStringLock = new Lock("read string busy");
	writeStringLock = new Lock("write string busy");

	console = new Console(in, out, ReadAvailHandler, WriteDoneHandler, 0);
}

SynchConsole::~SynchConsole()
{
	delete console;
	delete writeDone;
	delete readAvail;
}

void SynchConsole::SynchPutChar(int ch)
{
	writeCharLock->Acquire();
	console->PutChar(ch);
	writeDone->P();
	writeCharLock->Release();
}

int SynchConsole::SynchGetChar()
{
	readCharLock->Acquire();
	readAvail->P();
	int res = console->GetChar();
	readCharLock->Release();
	return res;
}

void SynchConsole::SynchPutString(const char s[])
{
	// ...
	//fprintf(stderr,"putstring %s\n", s);
	writeStringLock->Acquire();
	//fprintf(stderr,"putstring acquired %s\n", s);
	int i=0;
	while (s[i] != '\0')
	{
		SynchPutChar(s[i]);
		i++;
	}
	writeStringLock->Release();
	//fprintf(stderr,"putstring finished %s\n", s);
}

void SynchConsole::SynchGetString(char *s, int n)
{
	// ...
	/*for (int i=0; i < n; i++)
	{
		s[i] = (char) SynchGetChar();
	}*/
	readStringLock->Acquire();
	int i = 0;
	do {

		s[i] = (char) SynchGetChar();
		i++;
	} while (i < n-2 && (int)s[i-1] !=  10);
	s[i] = '\n';
	readStringLock->Release();
}

#endif // CHANGED